AWSTemplateFormatVersion: "2010-09-09"
Description: "A photo album app with NLU and image recognition"
Outputs:
    ApiHost:
        Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}"
    CloudfrontFrontendUrl:
        Value: !GetAtt CloudFrontDistribution.DomainName
    S3FrontendUrl:
        Value: !GetAtt
            - S3BucketFrontend
            - WebsiteURL
Resources:
    # API Gateway Resources
    #############################
    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "cfx-photobot-api"
            Description: "AI Photo Search application, built during the Cloud and Big Data course at Columbia University."
            ApiKeySourceType: "HEADER"
            BinaryMediaTypes:
              - "image/*"
            EndpointConfiguration:
                Types:
                  - "REGIONAL"

    ApiGatewayStage:
        Type: "AWS::ApiGateway::Stage"
        Properties:
            StageName: "dev"
            DeploymentId: !Ref ApiGatewayDeployment
            RestApiId: !Ref ApiGatewayRestApi

    ApiGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn:
            - "ApiGatewayMethodGet"
            - "ApiGatewayMethodPut"
            - "ApiGatewayMethodOptionsSearch"
            - "ApiGatewayMethodOptionsPut"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi

    ApiGatewayResourceSearch:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "search"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayResourceUpload:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "upload"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayMethodGet:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResourceSearch
            HttpMethod: "GET"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            OperationName: "searchPhotos"
            RequestParameters:
                "method.request.querystring.q": false
            RequestModels: {}
            MethodResponses:
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModelSearchResponse
                ResponseParameters: {}
                StatusCode: "200"
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModelError
                ResponseParameters: {}
                StatusCode: "403"
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModelError
                ResponseParameters: {}
                StatusCode: "500"
            Integration:
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses:
                  -
                    ResponseTemplates: {}
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestParameters: {}
                RequestTemplates: {}
                TimeoutInMillis: 29000
                Type: "AWS_PROXY"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionSearch}/invocations"

    # OPTIONS for /search 
    ApiGatewayMethodOptionsSearch:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResourceSearch
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              -
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates: 
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayMethodPut:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResourceUpload
            HttpMethod: "PUT"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            OperationName: "uploadPhoto"
            RequestParameters:
                "method.request.header.custom-labels": false
            RequestModels: {}
            MethodResponses:
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModelGeneric
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModelError
                ResponseParameters: {}
                StatusCode: "403"
              -
                ResponseModels:
                    "application/json": !Ref ApiGatewayModelError
                ResponseParameters: {}
                StatusCode: "500"
            Integration:
                Credentials: !GetAtt IAMRoleApiGateway.Arn
                IntegrationHttpMethod: "PUT"
                IntegrationResponses:
                  -
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestParameters:
                    "integration.request.header.x-amz-meta-customlabels": "method.request.header.custom-labels"
                    "integration.request.path.bucket": !Sub "'${S3BucketStore}'"
                    "integration.request.path.object": "context.requestId"
                RequestTemplates: {}
                TimeoutInMillis: 29000
                Type: "AWS"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{object}"

    # OPTIONS for /upload
    ApiGatewayMethodOptionsPut:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResourceUpload
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,custom-labels'"
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    SelectionPattern: "200"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates: 
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayModelPhoto:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "cfxPhoto"
            Schema: |
                {
                  "type" : "object",
                  "properties" : {
                    "url" : {
                      "type" : "string"
                    },
                    "labels" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  }
                }
            ContentType: "application/json"

    ApiGatewayModelGeneric:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "cfxGenericResponse"
            Schema: |
                {
                  "type" : "object",
                  "properties" : { }
                }
            ContentType: "application/json"

    ApiGatewayModelSearchResponse:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "cfxSearchResponse"
            Schema: !Sub |
                {
                  "type" : "object",
                  "properties" : {
                    "results" : {
                      "type" : "array",
                      "items" : {
                        "$ref":"https://apigateway.amazonaws.com/restapis/${ApiGatewayRestApi}/models/${ApiGatewayModelPhoto}"
                      }
                    }
                  }
                }
            ContentType: "application/json"

    ApiGatewayModelError:
        Type: "AWS::ApiGateway::Model"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Name: "cfxError"
            Schema: |
                {
                  "type" : "object",
                  "properties" : {
                    "code" : {
                      "type" : "integer",
                      "format" : "int32"
                    },
                    "message" : {
                      "type" : "string"
                    }
                  }
                }
            ContentType: "application/json"

    # S3 Resources
    ######################################
    S3BucketStore:
        Type: "AWS::S3::Bucket"
        DependsOn:
            - "LambdaFunctionUpload"
            - "LambdaPermissionUpload"
        Properties:
            BucketName: "cfx-wad-csgy-9223-photobot-store"
            NotificationConfiguration: 
                LambdaConfigurations: 
                  - 
                    Event: "s3:ObjectCreated:Put"
                    Filter: 
                        S3Key: 
                            Rules: 
                              - 
                                Name: "Prefix"
                                Value: ""
                              - 
                                Name: "Suffix"
                                Value: ""
                    Function: !GetAtt LambdaFunctionUpload.Arn

    S3BucketPolicyStore:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3BucketStore
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "PublicRead"
                    Effect: "Allow"
                    Principal: "*"
                    Action: 
                      - "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3BucketStore}/*"

    S3BucketFrontend:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "cfx-wad-csgy-9223-photobot-frontend"
            WebsiteConfiguration: 
                IndexDocument: "index.html"

    S3BucketPolicyFrontend:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3BucketFrontend
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "PublicRead"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3BucketFrontend}/*"

    S3BucketCodePipeline:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "cfx-codepipeline-${AWS::Region}-260380406818"

    S3BucketPolicyCodePipeline:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3BucketCodePipeline
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "DenyUnEncryptedObjectUploads"
                    Effect: "Deny"
                    Principal: "*"
                    Action: "s3:PutObject"
                    Resource: !Sub "arn:aws:s3:::${S3BucketCodePipeline}/*"
                    Condition: 
                        StringNotEquals: 
                            "s3:x-amz-server-side-encryption": "aws:kms"
                  - 
                    Sid: "DenyInsecureConnections"
                    Effect: "Deny"
                    Principal: "*"
                    Action: "s3:*"
                    Resource: !Sub "arn:aws:s3:::${S3BucketCodePipeline}/*"
                    Condition: 
                        Bool: 
                            "aws:SecureTransport": "false"

    # Lambda Resources
    #####################################
    LambdaFunctionUpload:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "cfx-photobot-lf1"
            Handler: "index.lambda_handler"
            Architectures: 
              - "x86_64"
            Environment:
                Variables:
                    OPENSEARCH_ENDPOINT: !GetAtt OpenSearchServiceDomain.DomainEndpoint
            Code: 
                ZipFile: |
                    # CODE WILL INITIALIZE VIA CodePipelinePipelineUpload
            MemorySize: 128
            Role: !GetAtt IAMRoleLambda.Arn
            Runtime: "python3.7"
            Timeout: 10
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaPermissionUpload:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunctionUpload.Arn
            Principal: "s3.amazonaws.com"
            SourceArn: "arn:aws:s3:::*cfx-wad-csgy-9223-photobot-store*"

    LambdaFunctionSearch:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "cfx-photobot-lf2"
            Handler: "index.lambda_handler"
            Architectures:
              - "x86_64"
            Environment:
                Variables:
                    OPENSEARCH_ENDPOINT: !GetAtt OpenSearchServiceDomain.DomainEndpoint
                    S3_BUCKET_ENDPOINT: !GetAtt S3BucketStore.DomainName
                    LEX_BOT_ID: !GetAtt LexBot.Id
                    LEX_ALIAS_ID: !GetAtt LexBotAlias.BotAliasId
            Code:
                ZipFile: |
                    # CODE WILL INITIALIZE VIA CodePipelinePipelineSearch
            MemorySize: 128
            Role: !GetAtt IAMRoleLambda.Arn
            Runtime: "python3.7"
            Timeout: 10
            TracingConfig:
                Mode: "PassThrough"
            EphemeralStorage:
                Size: 512

    LambdaPermissionSearch:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunctionSearch.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"

    # OpenSearch Resources
    ###############################
    OpenSearchServiceDomain:
        Type: "AWS::OpenSearchService::Domain"
        Properties:
            DomainName: "cfx-photobot-es"
            EngineVersion: "OpenSearch_1.3"
            ClusterConfig:
                InstanceCount: 2
                InstanceType: "t3.small.search"
            AccessPolicies:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            AWS: !GetAtt IAMRoleLambda.Arn
                        Action: "es:*"
                        Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/cfx-photobot-es/*"
            EBSOptions:
                EBSEnabled: true
                VolumeType: "gp3"
                VolumeSize: 10
                Iops: 3000

    # CodePipeline Resources
    ##################################
    CodePipelinePipelineFrontend:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "cfx-photobot-frontend"
            RoleArn: !GetAtt IAMRoleCodePipeline.Arn
            ArtifactStore: 
                Location: !Ref S3BucketCodePipeline
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "ThirdParty"
                        Provider: "GitHub"
                        Version: "1"
                    Configuration: 
                        Branch: "main"
                        OAuthToken: '{{resolve:secretsmanager:github_pat:SecretString:token}}'
                        Owner: "wdickerson"
                        PollForSourceChanges: "false"
                        Repo: "csgy-9223-photobot-frontend"
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Build"
                Actions: 
                  - 
                    Name: "Build"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: !Ref CodeBuildProjectFrontend
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    OutputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "BuildVariables"
                    RunOrder: 1
              - 
                Name: "Deploy"
                Actions: 
                  - 
                    Name: "Deploy"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "S3"
                        Version: "1"
                    Configuration: 
                        BucketName: !Ref S3BucketFrontend
                        Extract: "true"
                    InputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "DeployVariables"
                    RunOrder: 1

    CodePipelineWebhookFrontend:
        Type: "AWS::CodePipeline::Webhook"
        Properties:
            Authentication: "GITHUB_HMAC"
            AuthenticationConfiguration:
                SecretToken: '{{resolve:secretsmanager:github_pat:SecretString:token}}'
            RegisterWithThirdParty: "true"
            Filters:
              - 
                JsonPath: "$.ref"
                MatchEquals: refs/heads/{Branch}
            TargetPipeline: !Ref CodePipelinePipelineFrontend
            TargetAction: "Source"
            TargetPipelineVersion: !GetAtt CodePipelinePipelineFrontend.Version

    CodeBuildProjectFrontend:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: "cfx-photobot-frontend-build"
            Source: 
                BuildSpec: !Sub |
                    version: 0.2
                    phases:
                        install:
                            runtime-versions:
                                nodejs: 16
                            commands:
                                - npm install
                        build:
                            commands:
                                - npm run build
                    artifacts:
                        files:
                            - '**/*'
                        base-directory: build
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "cfx-photobot-frontend-build"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                EnvironmentVariables: 
                  - 
                    Name: "REACT_APP_PHOTOBOT_API_HOST"
                    Type: "PLAINTEXT"
                    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}"
                  - 
                    Name: "REACT_APP_TRANSCRIBE_ID"
                    Type: "PLAINTEXT"
                    Value: !Ref IAMAccessKeyTranscribe
                  - 
                    Name: "REACT_APP_TRANSCRIBE_KEY"
                    Type: "PLAINTEXT"
                    Value: !GetAtt IAMAccessKeyTranscribe.SecretAccessKey
                Image: "aws/codebuild/standard:6.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !GetAtt IAMRoleCodeBuild.Arn
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"

    CodePipelinePipelineUpload:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "cfx-photobot-lf1"
            RoleArn: !GetAtt IAMRoleCodePipeline.Arn
            ArtifactStore: 
                Location: !Ref S3BucketCodePipeline
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "ThirdParty"
                        Provider: "GitHub"
                        Version: "1"
                    Configuration: 
                        Branch: "main"
                        OAuthToken: '{{resolve:secretsmanager:github_pat:SecretString:token}}'
                        Owner: "wdickerson"
                        PollForSourceChanges: "false"
                        Repo: "csgy-9223-photobot-index"
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Deploy"
                Actions: 
                  - 
                    Name: "UploadToLambda"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: !Ref CodeBuildProjectUpload
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    RunOrder: 1

    CodePipelineWebhookUpload:
        Type: "AWS::CodePipeline::Webhook"
        Properties:
            Authentication: "GITHUB_HMAC"
            AuthenticationConfiguration:
                SecretToken: '{{resolve:secretsmanager:github_pat:SecretString:token}}'
            RegisterWithThirdParty: "true"
            Filters:
              - 
                JsonPath: "$.ref"
                MatchEquals: refs/heads/{Branch}
            TargetPipeline: !Ref CodePipelinePipelineUpload
            TargetAction: "Source"
            TargetPipelineVersion: !GetAtt CodePipelinePipelineUpload.Version

    CodeBuildProjectUpload:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: "cfx-photobot-lf1-upload"
            Description: "Just upload a zip file to lambda"
            Source: 
                BuildSpec: !Sub |
                    version: 0.2
                    phases:
                      build:
                        commands:
                          - ls
                          - zip -r package.zip .
                          - aws lambda update-function-code --function-name arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionUpload} --zip-file fileb://package.zip
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "cfx-photobot-lf1-upload"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:6.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !GetAtt IAMRoleCodeBuild.Arn
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"

    CodePipelinePipelineSearch:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "cfx-photobot-lf2"
            RoleArn: !GetAtt IAMRoleCodePipeline.Arn
            ArtifactStore: 
                Location: !Ref S3BucketCodePipeline
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "ThirdParty"
                        Provider: "GitHub"
                        Version: "1"
                    Configuration: 
                        Branch: "main"
                        OAuthToken: '{{resolve:secretsmanager:github_pat:SecretString:token}}'
                        Owner: "wdickerson"
                        PollForSourceChanges: "false"
                        Repo: "csgy-9223-photobot-search"
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Deploy"
                Actions: 
                  - 
                    Name: "UploadToLambda"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: !Ref CodeBuildProjectSearch
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    RunOrder: 1

    CodePipelineWebhookSearch:
        Type: "AWS::CodePipeline::Webhook"
        Properties:
            Authentication: "GITHUB_HMAC"
            AuthenticationConfiguration:
                SecretToken: '{{resolve:secretsmanager:github_pat:SecretString:token}}'
            RegisterWithThirdParty: "true"
            Filters:
              - 
                JsonPath: "$.ref"
                MatchEquals: refs/heads/{Branch}
            TargetPipeline: !Ref CodePipelinePipelineSearch
            TargetAction: "Source"
            TargetPipelineVersion: !GetAtt CodePipelinePipelineSearch.Version

    CodeBuildProjectSearch:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: "cfx-photobot-lf2-upload"
            Description: "Just upload a zip file to lambda"
            Source: 
                BuildSpec: !Sub |
                    version: 0.2
                    phases:
                      build:
                        commands:
                          - ls
                          - zip -r package.zip .
                          - aws lambda update-function-code --function-name arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionSearch} --zip-file fileb://package.zip
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "cfx-photobot-lf2-upload"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:6.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !GetAtt IAMRoleCodeBuild.Arn
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"

    # Lex Resources
    #####################################
    LexBot:
        Type: AWS::Lex::Bot
        Properties:
            Name: "cfxPhotobot"
            RoleArn: !GetAtt IAMRoleLex.Arn
            DataPrivacy:
                ChildDirected: false
            IdleSessionTTLInSeconds: 300
            Description: "Let users search for photos with natural language"
            AutoBuildBotLocales: true
            BotLocales:
                -   LocaleId: "en_US"
                    NluConfidenceThreshold: 0.40
                    VoiceSettings:
                        VoiceId: "Ivy"
                    SlotTypes:
                        -   Name: "Label"
                            Description: "Example labels for photos"
                            SlotTypeValues:
                                - SampleValue:
                                    Value: bulldog
                                - SampleValue:
                                    Value: puppies
                                - SampleValue:
                                    Value: beach
                                - SampleValue:
                                    Value: ice cream
                                - SampleValue:
                                    Value: fire engine
                                - SampleValue:
                                    Value: flowers
                                - SampleValue:
                                    Value: trees
                                - SampleValue:
                                    Value: birds
                                - SampleValue:
                                    Value: food
                                - SampleValue:
                                    Value: tacos
                                - SampleValue:
                                    Value: new york
                                - SampleValue:
                                    Value: brooklyn bridge
                                - SampleValue:
                                    Value: umbrella
                                - SampleValue:
                                    Value: smoothie
                                - SampleValue:
                                    Value: phone
                                - SampleValue:
                                    Value: table
                                - SampleValue:
                                    Value: building
                                - SampleValue:
                                    Value: people
                                - SampleValue:
                                    Value: baseball
                                - SampleValue:
                                    Value: pickles
                                - SampleValue:
                                    Value: adventure
                                - SampleValue:
                                    Value: outdoors
                                - SampleValue:
                                    Value: salad
                            ValueSelectionSetting:
                                ResolutionStrategy: ORIGINAL_VALUE
                    Intents:
                        -   Name: "SearchIntent"
                            SampleUtterances:
                                - Utterance: "Show me photos of {label}"
                                - Utterance: ",  ,  and {label}"
                                - Utterance: "show me {label} and"
                                - Utterance: "show me {label} or"
                                - Utterance: "find {label}"
                                - Utterance: "photos of {label} or"
                                - Utterance: "pics of {label}"
                                - Utterance: "pictures of {label} ,  , or"
                                - Utterance: "pics of {label} ,  , or"
                                - Utterance: "i want to see {label} ,  , or"
                            SlotPriorities:
                                -   Priority: 1
                                    SlotName: label
                            Slots:
                                -   Name: "label"
                                    SlotTypeName: "Label"
                                    MultipleValuesSetting:
                                        AllowMultipleValues: true
                                    ValueElicitationSetting:
                                        SlotConstraint: "Required"
                                        PromptSpecification:
                                            MessageGroupsList:
                                                -   Message:
                                                        PlainTextMessage:
                                                            Value: "What photos would you like to see?"
                                            MaxRetries: 3
                                            AllowInterrupt: false
                        -   Name: "FallbackIntent"
                            Description: "Default intent when no other intent matches"
                            ParentIntentSignature: "AMAZON.FallbackIntent"
 
    LexBotVersion:
        Type: AWS::Lex::BotVersion
        Properties:
            BotId: !Ref LexBot
            BotVersionLocaleSpecification:
                -   LocaleId: en_US
                    BotVersionLocaleDetails:
                        SourceBotVersion: DRAFT

    LexBotAlias:
        Type: AWS::Lex::BotAlias
        Properties:
            BotId: !Ref LexBot
            BotAliasName: "cfxPhotobotAlias"
            BotAliasLocaleSettings:
              - LocaleId: en_US
                BotAliasLocaleSetting:
                    Enabled: true
            BotVersion: !GetAtt LexBotVersion.BotVersion

    # CloudFormation Resources
    #####################################
    CloudFrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig: 
                Origins: 
                  - 
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    DomainName: !Sub "${S3BucketFrontend}.s3.${AWS::Region}.amazonaws.com"
                    Id: !Sub "${S3BucketFrontend}.s3.${AWS::Region}.amazonaws.com"
                    CustomOriginConfig:
                        OriginProtocolPolicy: "http-only"
                DefaultCacheBehavior: 
                    AllowedMethods: 
                      - "HEAD"
                      - "GET"
                      - "OPTIONS"
                    Compress: true
                    # The following ID is specified by AWS
                    CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "${S3BucketFrontend}.s3.${AWS::Region}.amazonaws.com"
                    ViewerProtocolPolicy: "redirect-to-https"
                PriceClass: "PriceClass_100"
                Enabled: true
                DefaultRootObject: "index.html"

    # IAM Resources
    #####################################
    IAMRoleApiGateway:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "cfxMyApiGatewayRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              - !Ref IAMManagedPolicyApiGateway
            Description: "Allows API Gateway to push logs to CloudWatch Logs and access S3, Lambda, etc."

    IAMManagedPolicyApiGateway:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "cfxMyApiGatewayPolicy"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "s3:PutObject",
                            "Resource": "arn:aws:s3:::*cfx-wad-csgy-9223-photobot-store*/*"
                        }
                    ]
                }

    IAMRoleLambda:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "cfxMyLambdaRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              - !Ref IAMManagedPolicyLambda
            Description: "Allows Lambda functions to call AWS services on your behalf."

    IAMManagedPolicyLambda:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "cfxMyLambdaPolicy"
            Path: "/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "rekognition:*",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lex:RecognizeText",
                                "s3:GetObject",
                                "s3:ListBucket"
                            ],
                            "Resource": [
                                "arn:aws:lex:*:${AWS::AccountId}:bot-alias/*/*",
                                "arn:aws:s3:::*cfx-wad-csgy-9223-photobot-store*/*"
                            ]
                        }
                    ]
                }

    IAMRoleLex:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "cfxMyLexRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"},{\"Sid\":\"Statement1\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lexv2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: "Allows Lex V2 bots to call AWS services on your behalf."

    IAMRoleCodePipeline:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "cfxMyPhotobotCodePipelineRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicyCodePipelineAndBuild

    IAMRoleCodeBuild:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "cfxMyPhotobotCodeBuildRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicyCodePipelineAndBuild

    IAMManagedPolicyCodePipelineAndBuild:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "cfxMyCodeBuildBasePolicy-photobot-build-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:UpdateFunctionCode",
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutTestCases",
                                "codebuild:BatchPutCodeCoverages",
                                "codebuild:BatchGetBuilds",
                                "codebuild:StartBuild",
                                "codebuild:BatchGetBuildBatches",
                                "codebuild:StartBuildBatch"                            
                            ],
                            "Resource": [
                                "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionSearch}",
                                "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionUpload}",
                                "arn:aws:s3:::*cfx-codepipeline-${AWS::Region}-*",
                                "arn:aws:s3:::*cfx-wad-csgy-9223-photobot-frontend*",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/cfx-photobot-frontend-build",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/cfx-photobot-frontend-build:*",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/cfx-photobot-lf1-upload",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/cfx-photobot-lf1-upload:*",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/cfx-photobot-lf2-upload",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/cfx-photobot-lf2-upload:*",
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/cfx-photobot-lf1-upload-*",
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/cfx-photobot-lf2-upload-*",
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/cfx-photobot-frontend-build-*",
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/cfx-photobot-frontend-build",
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/cfx-photobot-lf1-upload",
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/cfx-photobot-lf2-upload"
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                }

    IAMUserTranscribe:
        Type: "AWS::IAM::User"
        Properties:
            Path: "/"
            UserName: "cfx-transcribe-user"
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicyTranscribe

    IAMManagedPolicyTranscribe:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "cfxMyTranscribePolicy"
            Path: "/"
            PolicyDocument: |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "transcribe:StartStreamTranscriptionWebSocket",
                            "Resource": "*"
                        }
                    ]
                }

    IAMAccessKeyTranscribe:
        Type: "AWS::IAM::AccessKey"
        Properties:
            Status: "Active"
            UserName: !Ref IAMUserTranscribe
